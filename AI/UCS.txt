#include <bits/stdc++.h>
#include <vector>

using namespace std;
vector<int>graph[100];

int cost[1000][1000];
typedef pair<int,int>c;
int visited[1000];
int goaln;


vector<int> UCF(vector<int>graph[],int start)
{
   vector<int> answer;


    priority_queue<c,vector<c>,greater<c> > costTrack;
    int totalcost = 0;
    costTrack.push(make_pair(totalcost,start));
    visited[start] = 1;

    while(!costTrack.empty())
    {

        pair<int,int> top =costTrack.top();
        costTrack.pop();

        cout<<top.first<<" "<<top.second<<" --";
        if(top.second == goaln)
        {
            break;
        }
        for(int i = 0;i<graph[top.second].size();i++)
        {

            int u = graph[top.second][i];
            int Pcost = cost[top.second][u];
            Pcost = Pcost+top.first;
            if(visited[u]!= 1)
            {

                costTrack.push(make_pair(Pcost,u));
                visited[u] = 1;
            }
        }
    }





}

// graph
int main()
{
    int node,edge;
    cin>>node>>edge;
    cost[node][node];
    for(int i = 0; i < node; i++)
        {
            for(int j = 0;j<node;j++)
            {

                cost[i][j]=9999;
            }
        }

    for(int i = 0 ;i<edge;i++)
    {
        int a,b,c;
        cin>>a>>b>>c;
        graph[a].push_back(b);
        graph[b].push_back(a);
        cost[a][b] = c;}

        cout<<"Enter Goal Node"<<endl;
        cin>>goaln;



       UCF(graph,goaln);

    }



