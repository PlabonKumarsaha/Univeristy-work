#include <bits/stdc++.h> 
using namespace std; 
vector<int>graph[100];
map<pair<int,int>,int>cost;
 

vector<int> UCF(vector<int> goal,int start)
{
   vector<int> answer; 
  
    
    priority_queue<pair<int, int> > queue; 
  
    
    for (int i = 0; i < goal.size(); i++) 
        answer.push_back(INT_MAX);
    
}
  
// graph 
void main()
{
    int node;edge;
    cin>>node>>edge;
    
    for(int i = 0 ;i<edge;i++)
    {
        int a,b,c;
        cin>>a>>b>>c;
        graph[a].push_back(b);
        graph[b].push_back(a);
        cost[make_pair(a,b)] = c;
        int goaln;
        vector<int> goal; 
        cout<<"Enter Goal Node"<<endl;
        cin>>goaln;
        goal.push_back(goaln); 
        
        
        vector<int> answer = UCF(goal,goaln);
        
        cout << "Minimum cost from start = " 
         << answer[0] << endl;
        
    }
    
    
    return 0;
}