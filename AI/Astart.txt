#include <bits/stdc++.h>
#include <vector>

using namespace std;
vector<int>graph[1000];

int cost[1000][1000];
int hurasticVal[1000];
typedef pair<int,int>c;
int visited[1000];
int goaln;


vector<int> AStar(vector<int>graph[],int start,int goaln)
{
   vector<int> answer;


    priority_queue<c,vector<c>,greater<c> > costTrack;
    int t1,t2;
    int hcost = 0 + hurasticVal[start];
   // costTrack.push(make_pair(hcost,start));
    //int totalcost = 0;
    costTrack.push(make_pair(hcost,start));
    visited[start] = 1;

    while(!costTrack.empty())
    {

        pair<int,int> top =costTrack.top();
        costTrack.pop();
        t1 = top.first;
        t2 = top.second;

        //cout<<top.first<<" "<<top.second<<" --";
        if(t2 == goaln)
        {
            break;
        }

        for(int i = 0;i<graph[top.second].size();i++)
        {

            int H = graph[top.second][i];
            int ccost = top.first - hurasticVal[top.second]+hurasticVal[H]+cost[top.second][H];
            costTrack.push(make_pair(ccost,H));


           cout<<"Last top :"<<endl;
           cout<<t1 <<" "<<t2<<endl;
        }
    }





}

// graph
int main()
{
    int node,edge;
    cin>>node>>edge;
    cost[node][node];
    for(int i = 0; i < node; i++)
        {
            for(int j = 0;j<node;j++)
            {

                cost[i][j]=9999;

            }
        }

    for(int i = 0 ;i<edge;i++)
    {
        int a,b,c,d;
        cin>>a>>b>>c>>d;
        graph[a].push_back(b);
        graph[b].push_back(a);
        cost[a][b] = c;
       // hurasticVal[a][b]=d;
        }


hurasticVal[node];
for(int i = 0;i <node;i++)
{

    cin>>hurasticVal[i];
}
 int start;
 cout<<"Enter start Node"<<endl;
        cin>>start;

        cout<<"Enter Goal Node"<<endl;
        cin>>goaln;


       AStar(graph,start,goaln);

    }



